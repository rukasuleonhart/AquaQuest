# Importando classe de configura√ß√µes do projeto
# Essa classe cont√©m vari√°veis como URL do banco de dados, secret keys, etc.
from .settings import settings

# Importando fun√ß√µes do SQLAlchemy para trabalhar com banco de dados
from sqlalchemy import create_engine          # Cria a "engine", que √© a conex√£o com o banco
from sqlalchemy.orm import sessionmaker      # Cria sess√µes de comunica√ß√£o com o banco

# üö™ Criando a "engine" que conecta a aplica√ß√£o ao banco de dados
# settings.database_url √© a URL do banco, por exemplo: "sqlite:///./test.db" ou "postgresql://user:pass@host/db"
engine = create_engine(settings.database_url)

# üì¶ Criando uma f√°brica de sess√µes
# SessionLocal √© uma fun√ß√£o que cria sess√µes de banco de dados, usadas para consultar ou modificar dados
# autocommit=False -> voc√™ precisa confirmar as mudan√ßas manualmente
# autoflush=False -> n√£o envia mudan√ßas automaticamente antes de consultas
# bind=engine -> vincula a sess√£o √† engine criada acima
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Fun√ß√£o que ser√° usada nos endpoints para fornecer a sess√£o do banco
def get_db():
    db = SessionLocal()       # ‚Ä¢ Conectando ao banco de dados (abre uma sess√£o)
    print("‚úÖ - Sess√£o aberta!")
    try:
        yield db              # ‚Ä¢ Entrega a sess√£o para ser usada nos endpoints
        print("‚òëÔ∏è - Operac√£o conclu√≠da!")  
    finally:
        db.close()            # ‚Ä¢ Fecha a sess√£o ap√≥s o uso, liberando recursos
        print("‚ùå - Sess√£o encerrada!")